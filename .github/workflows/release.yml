name: Release
on:
  pull_request:
    types: [closed]
    branches:
      - "main"
permissions:
  contents: write
jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref }}
      - name: Set up GraalVM
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "24"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Get current version and calculate next
        id: create_version
        run: |
          # Get current version from Gradle
          CURRENT_VERSION=$(./gradlew currentVersion -q -Prelease.quiet | tail -n 1)
          echo "Raw version from Gradle: '$CURRENT_VERSION'"
          
          # Clean up the version string more carefully
          CURRENT_VERSION=$(echo "$CURRENT_VERSION" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Cleaned current version: '$CURRENT_VERSION'"
          
          # Validate we got a proper version
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Could not parse current version. Got: '$CURRENT_VERSION'"
            echo "Setting fallback version to 0.0.1"
            CURRENT_VERSION="0.0.1"
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Validate version components
          if [[ -z "$MAJOR" || -z "$MINOR" || -z "$PATCH" ]]; then
            echo "Error: Failed to parse version components"
            echo "MAJOR='$MAJOR', MINOR='$MINOR', PATCH='$PATCH'"
            exit 1
          fi
          
          echo "Parsed components - MAJOR: $MAJOR, MINOR: $MINOR, PATCH: $PATCH"
          
          # Determine version increment based on labels
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'feature') }}" == "true" ]]; then
            echo "Incrementing minor version for feature"
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'bug') }}" == "true" || "${{ contains(github.event.pull_request.labels.*.name, 'task') }}" == "true" ]]; then
            echo "Incrementing patch version for bug/task"
            PATCH=$((PATCH + 1))
          else
            echo "No versioning label found ('feature', 'bug', 'task'). Skipping release."
            exit 0
          fi
          
          # Create new version
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          
          # Validate new version format
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Generated invalid version format: '$NEW_VERSION'"
            exit 1
          fi
          
          # Set output and create tag
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Creating tag: v${NEW_VERSION}"
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
  build-native:
    needs: release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            binary_name: core
            output_name: syntaxpresso-linux-amd64
          - os: macos-13
            platform: macos
            arch: amd64
            binary_name: core
            output_name: syntaxpresso-macos-amd64
          - os: macos-latest
            platform: macos
            arch: arm64
            binary_name: core
            output_name: syntaxpresso-macos-arm64
          - os: windows-latest
            platform: windows
            arch: amd64
            binary_name: core.exe
            output_name: syntaxpresso-windows-amd64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up GraalVM
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "24"
      - name: Grant execute permission for gradlew (Unix)
        if: matrix.platform != 'windows'
        run: chmod +x gradlew
      - name: Build native image
        run: ./gradlew nativeCompile
      - name: Rename binary for platform
        run: |
          if [ -f "build/native/nativeCompile/${{ matrix.binary_name }}" ]; then
            mv "build/native/nativeCompile/${{ matrix.binary_name }}" "build/native/nativeCompile/${{ matrix.output_name }}"
            echo "Renamed ${{ matrix.binary_name }} to ${{ matrix.output_name }}"
          else
            echo "Binary ${{ matrix.binary_name }} not found!"
            ls -la build/native/nativeCompile/
            exit 1
          fi
        shell: bash
      - name: Make binary executable (Unix)
        if: matrix.platform != 'windows'
        run: |
          chmod +x "build/native/nativeCompile/${{ matrix.output_name }}"
          echo "Made ${{ matrix.output_name }} executable"
      - name: Verify renamed binary
        run: |
          if [ -f "build/native/nativeCompile/${{ matrix.output_name }}" ]; then
            echo "Successfully created ${{ matrix.output_name }}"
            ls -la "build/native/nativeCompile/${{ matrix.output_name }}"
          else
            echo "Failed to create ${{ matrix.output_name }}"
            ls -la build/native/nativeCompile/
            exit 1
          fi
        shell: bash
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.platform }}-${{ matrix.arch }}
          path: build/native/nativeCompile/${{ matrix.output_name }}
          retention-days: 1
  create-release:
      needs: [release, build-native]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Download all artifacts
          uses: actions/download-artifact@v4
          with:
            path: binaries
        - name: List downloaded files
          run: |
            echo "Contents of binaries directory:"
            ls -la binaries/
            echo ""
            echo "Contents of each subdirectory:"
            for dir in binaries/*/; do
              echo "Contents of $dir:"
              ls -la "$dir"
            done
        - name: Prepare release files
          run: |
            mkdir -p release-files
            cp binaries/binary-linux-amd64/syntaxpresso-linux-amd64 release-files/ || true
            cp binaries/binary-macos-amd64/syntaxpresso-macos-amd64 release-files/ || true
            cp binaries/binary-macos-arm64/syntaxpresso-macos-arm64 release-files/ || true
            cp binaries/binary-windows-amd64/syntaxpresso-windows-amd64.exe release-files/ || true
            
            # Make Unix binaries executable
            chmod +x release-files/syntaxpresso-linux-amd64 || true
            chmod +x release-files/syntaxpresso-macos-amd64 || true
            chmod +x release-files/syntaxpresso-macos-arm64 || true
            
            echo "Final release files with permissions:"
            ls -la release-files/
        - name: Create GitHub Release
          uses: softprops/action-gh-release@v2
          with:
            tag_name: v${{ needs.release.outputs.version }}
            generate_release_notes: true
            files: release-files/*
