name: Release

on:
  pull_request:
    types: [closed]

jobs:
  release:
    # This job only runs if the pull request was merged
    if: github.event.pull_request.merged == true

    # This is the matrix strategy for multi-platform builds
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: core-linux-amd64
            binary_path: build/native/nativeCompile/core
          - os: windows-latest
            asset_name: core-windows-amd64.exe
            binary_path: build/native/nativeCompile/core.exe
          - os: macos-14 # This runner is for Apple Silicon (ARM64)
            asset_name: core-macos-aarch64
            binary_path: build/native/nativeCompile/core
          - os: macos-latest # This runner is for Intel Macs (x86_64)
            asset_name: core-macos-x86_64
            binary_path: build/native/nativeCompile/core

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write # Allows the workflow to push commits and tags

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Switch to the main branch
      - name: Switch to the main branch
        run: git checkout main

      # Step 3: Set up the GraalVM JDK
      - name: Set up JDK
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: "graalvm-community"
          java-version: "24"

      # Step 4: Make the Gradle wrapper executable (not needed on Windows)
      - name: Grant execute permission for gradlew
        if: runner.os != 'Windows'
        run: chmod +x gradlew

      # Step 5: Configure Git user
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      # Step 6: Get the version number (run this only once)
      - name: Get the new version
        id: get_version
        # We need a unique condition to run this step in only one job of the matrix
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'feature') }}" == "true" ]]; then
            echo "Incrementing minor version for feature"
            ./gradlew release -Prelease.incrementer=incrementMinor
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'bug') }}" == "true" || "${{ contains(github.event.pull_request.labels.*.name, 'task') }}" == "true" ]]; then
            echo "Incrementing patch version for bug/task"
            ./gradlew release -Prelease.incrementer=incrementPatch
          else
            echo "No versioning label found. Skipping release."
            exit 0
          fi
          echo "VERSION=$(./gradlew currentVersion -q -Prelease.quiet)" >> $GITHUB_ENV
          echo "VERSION=$(./gradlew currentVersion -q -Prelease.quiet)" >> $GITHUB_OUTPUT

      # Step 7: Build the native executable
      - name: Build native image
        run: ./gradlew nativeBuild

      # Step 8: Create the GitHub Release and upload binaries
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          # The softprops action cleverly handles the matrix:
          # The first job creates the release, subsequent jobs add to it.
          tag_name: ${{ steps.get_version.outputs.VERSION || format('v{0}', needs.release.outputs.version) }}
          files: ${{ matrix.binary_path }}
          asset_name: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
