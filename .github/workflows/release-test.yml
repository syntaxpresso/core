name: Release

on:
  pull_request:
    types: [closed] # Run the workflow only when a PR is closed
    branches:
      - "test-release" # Target branch for the PR

# üîë This block is added to grant the workflow permission to push tags.
permissions:
  contents: write

jobs:
  release:
    # This condition ensures the job only runs if the PR was actually merged.
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        # Updated to the latest major version
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags for axion-release-plugin
          fetch-depth: 0

      - name: Set up GraalVM
        # Updated to the latest major version
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "24"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Increment version and push tag
        id: versioning
        run: |
          # This logic determines whether to increment the minor or patch version based on PR labels.
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'feature') }}" == "true" ]]; then
            echo "Incrementing minor version for feature"
            ./gradlew release -Prelease.incrementer=incrementMinor
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'bug') }}" == "true" || "${{ contains(github.event.pull_request.labels.*.name, 'task') }}" == "true" ]]; then
            echo "Incrementing patch version for bug/task"
            ./gradlew release -Prelease.incrementer=incrementPatch
          else
            echo "No versioning label found ('feature', 'bug', 'task'). Skipping release."
            exit 0
          fi

      - name: Get the new version
        id: get_version
        # ‚úÖ FIX: Added '| tail -n 1' to filter out the progress bar from the output.
        run: echo "VERSION=$(./gradlew currentVersion -q -Prelease.quiet | tail -n 1)" >> $GITHUB_OUTPUT

      - name: Build native image
        run: ./gradlew nativeCompile # Using 'nativeCompile' is more specific than 'nativeBuild'

      - name: Create GitHub Release
        # Updated to the latest major version
        uses: softprops/action-gh-release@v2
        with:
          # The tag is read from the output of the versioning step
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          # This automatically creates release notes from your commit history
          generate_release_notes: true
          # ‚ö†Ô∏è Ensure 'core' matches the actual output binary name from your build
          files: build/native/nativeCompile/core
